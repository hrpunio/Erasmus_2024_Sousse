str(roth)
# fit the path model
roth.fit <- lavaan::sem(roth, sample.cov=covfull, sample.nobs=373, optim.method=list("BFGS"))
summary(roth.fit, fit.measures=T, standardized=T, rsquare=T)
summary(roth.fit, fit.measures=T, standardized=F, rsquare=T)
fig2 <- semPlot::semPaths(roth.fit, whatLabels = "std", layout = "tree2",
rotation = 2, style = "lisrel",
optimizeLatRes = TRUE,
structural = FALSE,
layoutSplit = FALSE,
intercepts = FALSE,
residuals = T,
curve = 3, curvature = 3, nCharNodes = 8,
sizeLat = 5, sizeMan = 8, sizeMan2 = 6,
edge.label.cex = 0.9, label.cex=1.1, residScale=10,
edge.color = "black", edge.label.position = .40, DoNotPlot=T)
plot(fig2)
summary(roth.fit, fit.measures=T, standardized=F, rsquare=T)
corr
corrfull
summary(roth.fit, fit.measures=T, standardized=T, rsquare=T)
fig2 <- semPlot::semPaths(roth.fit, whatLabels = "std", layout = "tree2",
##
rotation = 2,
style = "lisrel",
optimizeLatRes = TRUE,
structural = FALSE,
layoutSplit = FALSE,
intercepts = FALSE,
residuals = T,
##
curve = 3, curvature = 3, nCharNodes = 8,
sizeLat = 5, sizeMan = 8, sizeMan2 = 6,
edge.label.cex = 0.9, label.cex=1.1, residScale=10,
edge.color = "black", edge.label.position = .40, DoNotPlot=T)
plot(fig2)
data("BostonHousing2")
###################################
###################################
library("mlbench")
###################################
###################################
install.packages("mlbench")
library("mlbench")
data("BostonHousing2")
BostonSmall <- BostonHousing2 %>% dplyr::select(
cmedv, #median value of home in 1000s
crim, #per capita crime by town
nox, #nitric oxide concentration
lstat, #proportion of lower status
rad #proximity to radial highways
) %>% mutate(log_crim = log2(crim))
library("tidyverse")
data("BostonHousing2")
BostonSmall <- BostonHousing2 %>% dplyr::select(
cmedv, #median value of home in 1000s
crim, #per capita crime by town
nox, #nitric oxide concentration
lstat, #proportion of lower status
rad #proximity to radial highways
) %>% mutate(log_crim = log2(crim))
g1 <- ggplot(BostonSmall, aes(x=crim)) + geom_histogram(bins=15) +
theme_classic() + ggtitle("Histogram of crime rate")
g2 <- ggplot(BostonSmall, aes(x=crim, y=cmedv)) + geom_point() +
stat_smooth(method="lm") + ggtitle("Association of crime rate and housing prices")
plot_grid(g1, g2, nrow=1)
install.packages("cowplot")
library("cowplot")
plot_grid(g1, g2, nrow=1)
cowplot::plot_grid(g1, g2, nrow=1)
summary(lm(cmedv ~ log_crim, BostonSmall))
lavaan_m <- 'cmedv ~ log_crim'
mlav <- sem(lavaan_m, data=BostonSmall)
summary(mlav)
mlav_w_intercept <- sem(lavaan_m, data=BostonSmall, meanstructure=TRUE)
summary(mlav_w_intercept)
parTable(mlav)
library(pdftools)
install.packages("pdftools")
#install.packages("pdftools")
library(pdftools)
install.packages("pdftools")
install.packages("pdftools")
library(pdftools)
library(dplyr)
library(tidyverse)
rawfile <- "https://womeninsport.org/wp-content/uploads/2024/08/BY-GOLD-Paris-2024-medal-table-1-1.pdf"
rawlines <- pdf_text(rawfile) %>%
read_lines() %>%
data.frame() %>%
rename(rawline = 1)
View(rawlines)
library(tabulizer)
install.packages("tabulizer")
remotes::install_github(c("ropensci/tabulapdf"))
rawlines <- pdf_text(rawfile) %>%
read_lines() %>%
data.frame() %>%
strsplit(data, "\\s+")
rawlines <- pdf_text(rawfile) %>%
read_lines() %>%
data.frame() %>%
strsplit(rawline, "\\s+")
rawlines <- pdf_text(rawfile) %>%
read_lines() %>%
data.frame() %>%
##strsplit(rawline, "\\s+")
rename(rawline = 1)
rawlines <- pdf_text(rawfile) %>%
read_lines() %>%
data.frame()
View(rawlines)
rawlines <- pdf_text(rawfile) %>%
read_lines() %>%
data.frame() %>%
##strsplit(rawline, "\\s+")
rename(rawline = 1) |>
strsplit(rawline, "\\s+")
rawlines <- pdf_text(rawfile) %>%
read_lines() %>%
data.frame() %>%
##strsplit(rawline, "\\s+")
rename(rawline = 1) |>
str_split(rawline, "\\s+")
rawlines <- pdf_text(rawfile) %>%
read_lines() %>%
data.frame() %>%
##strsplit(rawline, "\\s+")
rename(rawline = 1)
str(rawlines)
y <- pnorm(seq(1, 10 by=1), mean = 2.5, sd = 2)
y <- pnorm(seq(1, 10, by=1), mean = 2.5, sd = 2)
y
z1 <- pnorm(z, mean = 0, sd = .2)
z2 <- pnorm(z, mean = 0, sd = .1)
z <- seq(1, 10, by=1)
z1 <- pnorm(z, mean = 0, sd = .2)
z2 <- pnorm(z, mean = 0, sd = .1)
z3 <- pnorm(z, mean = 0, sd = .15)
z1 <- y + pnorm(z, mean = 0, sd = .2)
z2 <- y + pnorm(z, mean = 0, sd = .1)
z3 <- y + pnorm(z, mean = 0, sd = .15)
z0 <- z1 + z2 + z3
var(z0)
var(z1)
var(z2)
var(z3)
data.frame(z1, z2, z3)
z00 <- data.frame(z1, z2, z3)
View(z00)
View(z00)
y
z1
z2
pnorm(z, mean = 0, sd = .2)
z1 <- y + pnorm(z, mean = 0, sd = .4)
z1
pnorm(z, mean = 0, sd = .4)
z <- seq(0, 1, by=.1)
pnorm(z, mean = 0, sd = .4)
z1 <- y + pnorm(z, mean = 0, sd = .2)
z <- seq(0, 1, by=.1)
z <- seq(0, 1, by=.1)
y <- seq(1, 10, by=1) + pnorm(z, mean = .5, sd = .5)
y <- seq(0, 10, by=1) + pnorm(z, mean = .5, sd = .5)
y
z1 <- y + pnorm(z, mean = 0, sd = .2)
z1
z2 <- y + pnorm(z, mean = 0, sd = .1)
z2
z3 <- y + pnorm(z, mean = 0, sd = .35)
z3
z1 <- y + pnorm(z, mean = 0, sd = .42)
z1
z2 <- y + pnorm(z, mean = 0, sd = .6)
z2
z3 <- y + pnorm(z, mean = 0, sd = .35)
z3
z0 <- z1 + z2 + z3
var(z0)
var(z1)
var(z2)
var(z3)
z00 <- data.frame(z1, z2, z3)
View(z00)
cov(z00)
var(z0)
sum(z00)
q <- 13.76550 + 13.79371 + 13.75589
q
var(z0) - q
var(z0)
cc <- sum(z00)
cc - q
z <- seq(0, 1, by=.1)
y <- seq(0, 10, by=1) + pnorm(z, mean = .5, sd = .5)
y
z1 <- y + pnorm(z, mean = 0, sd = .42)
z1
z2 <- y + pnorm(z, mean = 0, sd = .6)
z2
z3 <- y + pnorm(z, mean = 0, sd = .35)
z3
z0 <- z1 + z2 + z3
var(z0)
var(z1)
var(z2)
var(z3)
z00 <- data.frame(z1, z2, z3)
View(z00)
library("tidyverse")
z01 <- z00 |> pivot_longer(names_to = 'z', values_to = 'v')
z01 <- z00 |> pivot_longer(cols = c(z1, z2, z3), names_to = 'z', values_to = 'v')
View(z01)
z01t <- z00 |> group_by(z) | summarise(v = var(v))
z01t <- z01 |> group_by(z) | summarise(v = var(v))
View(z01)
z01t <- z01 |> group_by(z) | summarise(v = var(v))
z01t <- z01 |> group_by(z) |> summarise(v = var(v))
View(z01t)
z1 <- y + pnorm(z, mean = 0, sd = .42)
z2 <- y + pnorm(z, mean = 0, sd = 2.6)
z3 <- y + pnorm(z, mean = 0, sd = 1.35)
z00 <- data.frame(z1, z2, z3)
z01 <- z00 |> pivot_longer(cols = c(z1, z2, z3), names_to = 'z', values_to = 'v')
z01t <- z01 |> group_by(z) |> summarise(v = var(v))
View(z01t)
ss_total = var(v)
ss_total = var(z01$v)
N <- nrow(z01)
ss_total = var(z01$v) * (N-1)
## or
ss_total_alt <- sum(z01$v - mean(z01$v))
## or
ss_total_alt <- sum((z01$v - mean(z01$v)^2)
## or
ss_total_alt <- sum((z01$v - mean(z01$v)^2)
## or
ss_total_alt <- sum((z01$v - mean(z01$v)**2)
## or
ss_total_alt <- sum((z01$v - mean(z01$v)**2)
## or
ss_total_alt <- sum((z01$v - mean(z01$v)^2)
## or
ss_total_alt <- sum((z01$v - mean(z01$v)^2)
## or
ss_total_alt <- sum((z01$v - mean(z01$v)^2)
ss_total_alt <- sum((z01$v - mean(z01$v))^2)
cov(z00)
ss_total_alt <- sum((z01$v - mean(z01$v))^2)
ss_total_gr <- z00 |> group_by(z) |>
summarise ( (v - mean(v))^2 )
ss_total_gr <- z01 |> group_by(z) |>
summarise ( (v - mean(v))^2 )
ss_total_gr <- z01 |> group_by(z) |>
summarise ( ss = (v - mean(v))^2 )
##
ss_total_gr <- z01 |> group_by(z) |>
summarise ( ss = sum(v - mean(v))^2 )
View(ss_total_gr)
##
ss_total_gr <- z01 |> group_by(z) |>
summarise ( ss = sum((v - mean(v))^2) )
View(ss_total_gr)
sum(ss_total_gr)
sum(ss_total_gr$ss)
ss_total_alt
sum(ss_total_gr$ss)
total_mean <- mean(z01$v)
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v) ) |>
ungroup() |>
summarise(ss = sum((m - total_mean)^2) )
View(ss_total_means_gr)
ss_total_means_gr$ss
ss_total_alt
sum(ss_total_gr$ss)
ss_total_means_gr$ss
## check
check <- ss_total_alt -  sum(ss_total_gr$ss) + ss_total_means_gr$ss
## check
check <- ss_total_alt - ( sum(ss_total_gr$ss) + ss_total_means_gr$ss )
## check
check <- ss_total_alt - ( sum(ss_total_gr$ss) + ss_total_means_gr$ss )
## Total mean
total_mean <- mean(z01$v)
## or directly
ss_total_alt <- sum((z01$v - total_mean)^2)
##
ss_total_gr <- z01 |> group_by(z) |>
summarise ( ss = sum((v - mean(v))^2) )
sum(ss_total_gr$ss)
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v) )
View(ss_total_means_gr)
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v) ) |>
ungroup() |>
summarise(ss = sum((m - total_mean)^2) )
View(ss_total_gr)
sum(ss_total_gr$ss)
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v) ) |>
ungroup() |>
summarise(ss = sum((m - total_mean)^2) )
View(ss_total_means_gr)
## check
ss_total_alt - ( sum(ss_total_gr$ss) + ss_total_means_gr$ss )
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v), n= n() ) |>
ungroup() |>
summarise(ss = n * sum((m - total_mean)^2) )
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v), n= n() ) #|>
View(ss_total_means_gr)
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v), n= n() ) #|>
View(ss_total_means_gr)
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v), n= n() ) #|>
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v), n= n() ) |>
ungroup() |>
summarise(ss = n * sum((m - total_mean)^2) )
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v), n= n() ) |>
ungroup() |>
summarise(ss = sum(n * (m - total_mean)^2) )
View(ss_total_means_gr)
## check
ss_total_alt - ( sum(ss_total_gr$ss) + ss_total_means_gr$ss )
set.seed(1963)
z <- seq(0, 1, by=.1)
y <- seq(0, 10, by=1) + pnorm(z, mean = .5, sd = .5)
y
z1 <- y + pnorm(z, mean = 0, sd = .42)
z2 <- y + pnorm(z, mean = 0, sd = 2.6)
z3 <- y + pnorm(z, mean = 0, sd = 1.35)
z00 <- data.frame(z1, z2, z3)
z01 <- z00 |> pivot_longer(cols = c(z1, z2, z3), names_to = 'z', values_to = 'v')
N <- nrow(z01)
z01t <- z01 |> group_by(z) |> summarise(v = var(v))
## Total mean
total_mean <- mean(z01$v)
##
ss_total <- var(z01$v) * (N-1)
## or directly
ss_total_alt <- sum((z01$v - total_mean)^2)
##
ss_total_gr <- z01 |> group_by(z) |>
summarise ( ss = sum((v - mean(v))^2) )
sum(ss_total_gr$ss)
###
ss_total_means_gr <- z01 |> group_by(z) |>
summarise ( m = mean(v), n= n() ) |>
ungroup() |>
summarise(ss = sum(n * (m - total_mean)^2) )
ss_total_alt
sum(ss_total_gr$ss)
ss_total_means_gr$ss
## check
ss_total_alt - ( sum(ss_total_gr$ss) + ss_total_means_gr$ss )
## Variances
ss_total_alt/(N-1) - ( sum(ss_total_gr$ss) / (N-T) + ss_total_means_gr$ss / (T-1)  )
## Number of groups
T <- 3
## Variances
ss_total_alt/(N-1) - ( sum(ss_total_gr$ss) / (N-T) + ss_total_means_gr$ss / (T-1)  )
ss_total_means_gr$ss
## Variances
ss_total_alt/(N-1) - ( sum(ss_total_gr$ss) / (N-T) + ss_total_means_gr$ss / (T-1)  )
## Variances
ss_total_alt/(N-1) - ( sum(ss_total_gr$ss) / (N - T) + ss_total_means_gr$ss / (T - 1 )  )
res.ftest <- var.test(v ~ z, data = z01)
res.ftest <- summary(aov(v ~ z, data = z01))
res.ftest
library("gplots")
library("gplots")
install.packages("gplots")
library("gplots")
plotm(v ~ z, data=z01)
plotmeans(v ~ z, data=z01)
res.ftest
um(ss_total_gr$ss) / (N - T)
sum(ss_total_gr$ss) / (N - T)
ss_total_means_gr$ss / (T - 1 )
library("scales")
library("ggthemes")
library("ggpubr")
library("tidyverse")
library("ISOweek") ###
library("knitr")
library("eurostat")
dp <- get_eurostat("proj_23np",  stringsAsFactors = FALSE)
levels(as.factor(dp$geo))
dp0.eu <- dp0 |> filter (geo == 'EU27_2020')
dp0 <- dp |> mutate (year = substr(TIME_PERIOD, 1, 4)) |>
filter ( projection == 'BSL' & sex == 'T' & age == 'TOTAL') |>
group_by(geo) |>
mutate (vp = values / first(values)) |>
select (geo, year, values, vp)
dp0.pl <- dp0 |> filter (geo == 'PL')
dp0.eu <- dp0 |> filter (geo == 'EU27_2020')
View(dp0.eu)
dp0.pl <- dp0 |> filter (geo == 'PL')
View(dp0.pl)
levels(as.factor(dp$age))
dp0 <- dp |> mutate (year = substr(TIME_PERIOD, 1, 4)) |>
filter ( projection == 'BSL' & sex == 'T' & age == 'Y_GE65') |>
group_by(geo) |>
mutate (vp = values / first(values)) |>
select (geo, year, values, vp)
dp0.pl <- dp0 |> filter (geo == 'PL')
dp0.eu <- dp0 |> filter (geo == 'EU27_2020')
View(dp0.pl)
View(dp0.eu)
## Assumptions
fr <- get_eurostat("proj_23naasfr",  stringsAsFactors = FALSE)
mr <- get_eurostat("proj_23naasmr",  stringsAsFactors = FALSE)
mig_r <- get_eurostat("proj_23nanmig",  stringsAsFactors = FALSE)
migr_r0 <- mig_r |> mutate (year = substr(TIME_PERIOD, 1, 4)) |>
filter ( projection == 'BSL' & sex == 'T' & age == 'TOTAL') |>
group_by(geo) |>
mutate (vp = values / first(values)) |>
select (geo, year, values, vp)
migr_r0.pl <- migr_r0 |> filter (geo == 'PL')
View(migr_r0.pl)
setwd("~/Projekty/Erasmus/Sousa2024")
d <- read.csv("PODZ_2780_CREL_20221218071042.csv", sep = ';',
dec = ".",  header=T, na.string="NA") |>
select (Nazwa, type=Kierunki.wykorzystania.powierzchni, unit=Jednostka.miary,
value=Wartosc) |>
d <- read.csv("PODZ_2780_CREL_20221218071042.csv", sep = ';',
dec = ".",  header=T, na.string="NA") |>
select (Nazwa, type=Kierunki.wykorzystania.powierzchni, unit=Jednostka.miary,
value=Wartosc)
library("tidyverse")
d <- read.csv("PODZ_2780_CREL_20221218071042.csv", sep = ';',
dec = ".",  header=T, na.string="NA") |>
select (Nazwa, type=Kierunki.wykorzystania.powierzchni, unit=Jednostka.miary,
value=Wartosc)
setwd("~/Projekty/BDO/Qcharts.2022.pl")
d <- read.csv("PODZ_2780_CREL_20221218071042.csv", sep = ';',
dec = ".",  header=T, na.string="NA") |>
select (Nazwa, type=Kierunki.wykorzystania.powierzchni, unit=Jednostka.miary,
value=Wartosc)
levels(d$type)
levels(as.factor(d$type))
d <- read.csv("PODZ_2780_CREL_20221218071042.csv", sep = ';',
dec = ".",  header=T, na.string="NA") |>
select (Nazwa, type=Kierunki.wykorzystania.powierzchni, unit=Jednostka.miary,
value=Wartosc) |>
mutate ( type = case_when(
"grunty pod wodami" ~ "lands under waters",
"grunty rolne - nieużytki" ~ "waste land",
"lasy" ~  "forests",
"ogółem w ha" ~ "total in ha",
"ogółem w odsetkach (Polska = 100%)" ~ "total in %",
"pozostała powierzchnia" ~ "other area",
"tereny mieszkaniowe" ~ "residential areas",
"tereny przemysłowe"  ~ "industrial lands",
"tereny rekreacji i wypoczynku" ~ "recreational and rest areas",
"użytki rolne" ~ "agricultural land")
)
d <- read.csv("PODZ_2780_CREL_20221218071042.csv", sep = ';',
dec = ".",  header=T, na.string="NA") |>
select (Nazwa, type=Kierunki.wykorzystania.powierzchni, unit=Jednostka.miary,
value=Wartosc) |>
mutate ( type = case_when(type,
"grunty pod wodami" ~ "lands under waters",
"grunty rolne - nieużytki" ~ "waste land",
"lasy" ~  "forests",
"ogółem w ha" ~ "total in ha",
"ogółem w odsetkach (Polska = 100%)" ~ "total in %",
"pozostała powierzchnia" ~ "other area",
"tereny mieszkaniowe" ~ "residential areas",
"tereny przemysłowe"  ~ "industrial lands",
"tereny rekreacji i wypoczynku" ~ "recreational and rest areas",
"użytki rolne" ~ "agricultural land")
)
d <- read.csv("PODZ_2780_CREL_20221218071042.csv", sep = ';',
dec = ".",  header=T, na.string="NA") |>
select (Nazwa, type=Kierunki.wykorzystania.powierzchni, unit=Jednostka.miary,
value=Wartosc) |>
mutate ( type = case_when(
. == "grunty pod wodami" ~ "lands under waters",
. == "grunty rolne - nieużytki" ~ "waste land",
. == "lasy" ~  "forests",
. == "ogółem w ha" ~ "total in ha",
. == "ogółem w odsetkach (Polska = 100%)" ~ "total in %",
. == "pozostała powierzchnia" ~ "other area",
. == "tereny mieszkaniowe" ~ "residential areas",
. == "tereny przemysłowe"  ~ "industrial lands",
. == "tereny rekreacji i wypoczynku" ~ "recreational and rest areas",
. == "użytki rolne" ~ "agricultural land")
)
d <- read.csv("PODZ_2780_CREL_20221218071042.csv", sep = ';',
dec = ".",  header=T, na.string="NA") |>
select (Nazwa, type=Kierunki.wykorzystania.powierzchni, unit=Jednostka.miary,
value=Wartosc) |>
mutate ( type = case_when(
type == "grunty pod wodami" ~ "lands under waters",
type == "grunty rolne - nieużytki" ~ "waste land",
type == "lasy" ~  "forests",
type == "ogółem w ha" ~ "total in ha",
type == "ogółem w odsetkach (Polska = 100%)" ~ "total in %",
type == "pozostała powierzchnia" ~ "other area",
type == "tereny mieszkaniowe" ~ "residential areas",
type == "tereny przemysłowe"  ~ "industrial lands",
type == "tereny rekreacji i wypoczynku" ~ "recreational and rest areas",
type == "użytki rolne" ~ "agricultural land")
)
